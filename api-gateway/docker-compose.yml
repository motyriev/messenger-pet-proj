services:
    nginx:
        image: nginx:latest
        container_name: api_gateway-nginx
        ports:
            - 8101:80
        volumes:
            - ./src:/var/www
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
        links:
            - app
        networks:
            - elk
    app:
        container_name: api_gateway-app
        build:
            context: .
            dockerfile: docker/Dockerfile
        tty: true
        volumes:
            - ./src:/var/www
        depends_on:
            - db
        networks:
            - elk
        expose:
            - 8080

    supervisor:
        build:
            context: .
            dockerfile: ./docker/supervisor/Dockerfile
        container_name: api_gateway-supervisor
        ports:
            - 7001:6001 # websocket server
        volumes:
            - ./src:/var/www
            - ./docker-data/supervisor:/var/log/
        depends_on:
            - app
        networks:
            - elk

    db:
        image: mysql:5.7.22
        container_name: api_gateway-db
        environment:
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        healthcheck:
            test: [ "CMD-SHELL", "mysqladmin ping -h ${MYSQL_DATABASE} -u ${MYSQL_USER} -p${MYSQL_PASSWORD}" ]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 10s
        volumes:
            - db_data:/var/lib/mysql
        ports:
            - 33065:3306
        tty: true
        networks:
            - elk

    filebeat:
        image: docker.elastic.co/beats/filebeat:7.9.3
        container_name: api_gateway-filebeat
        volumes:
            - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
            - ./src/storage/logs:/var/www/storage/logs:ro
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - elk

networks:
    elk:
        external: true

volumes:
    db_data: